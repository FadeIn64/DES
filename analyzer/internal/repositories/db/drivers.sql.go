// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: drivers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDriverByNumber = `-- name: GetDriverByNumber :one
SELECT driver_number, team_key, full_name, abbreviation, country, date_of_birth, description FROM drivers WHERE driver_number = $1
`

func (q *Queries) GetDriverByNumber(ctx context.Context, driverNumber int64) (Driver, error) {
	row := q.db.QueryRow(ctx, getDriverByNumber, driverNumber)
	var i Driver
	err := row.Scan(
		&i.DriverNumber,
		&i.TeamKey,
		&i.FullName,
		&i.Abbreviation,
		&i.Country,
		&i.DateOfBirth,
		&i.Description,
	)
	return i, err
}

const getDriversByTeam = `-- name: GetDriversByTeam :many
SELECT driver_number, team_key, full_name, abbreviation, country, date_of_birth, description FROM drivers WHERE team_key = $1 ORDER BY driver_number
`

func (q *Queries) GetDriversByTeam(ctx context.Context, teamKey pgtype.Int4) ([]Driver, error) {
	rows, err := q.db.Query(ctx, getDriversByTeam, teamKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Driver
	for rows.Next() {
		var i Driver
		if err := rows.Scan(
			&i.DriverNumber,
			&i.TeamKey,
			&i.FullName,
			&i.Abbreviation,
			&i.Country,
			&i.DateOfBirth,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
