// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: drivers_stats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDriverStats = `-- name: GetDriverStats :one
select position, meeting_key, session_key, driver_number, date_start, date_end, lap_duration, sectors, lap_number from drivers_stats_with_positions
where meeting_key = $1 and session_key = $2 and driver_number = $3
`

type GetDriverStatsParams struct {
	MeetingKey   int32
	SessionKey   int32
	DriverNumber int32
}

func (q *Queries) GetDriverStats(ctx context.Context, arg GetDriverStatsParams) (DriversStatsWithPosition, error) {
	row := q.db.QueryRow(ctx, getDriverStats, arg.MeetingKey, arg.SessionKey, arg.DriverNumber)
	var i DriversStatsWithPosition
	err := row.Scan(
		&i.Position,
		&i.MeetingKey,
		&i.SessionKey,
		&i.DriverNumber,
		&i.DateStart,
		&i.DateEnd,
		&i.LapDuration,
		&i.Sectors,
		&i.LapNumber,
	)
	return i, err
}

const getDriversStats = `-- name: GetDriversStats :many
select position, meeting_key, session_key, driver_number, date_start, date_end, lap_duration, sectors, lap_number from drivers_stats_with_positions
where meeting_key = $1 and session_key = $2
order by position
`

type GetDriversStatsParams struct {
	MeetingKey int32
	SessionKey int32
}

func (q *Queries) GetDriversStats(ctx context.Context, arg GetDriversStatsParams) ([]DriversStatsWithPosition, error) {
	rows, err := q.db.Query(ctx, getDriversStats, arg.MeetingKey, arg.SessionKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DriversStatsWithPosition
	for rows.Next() {
		var i DriversStatsWithPosition
		if err := rows.Scan(
			&i.Position,
			&i.MeetingKey,
			&i.SessionKey,
			&i.DriverNumber,
			&i.DateStart,
			&i.DateEnd,
			&i.LapDuration,
			&i.Sectors,
			&i.LapNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertDriverStats = `-- name: UpsertDriverStats :exec
insert into drivers_stats (meeting_key, session_key, driver_number, date_start, date_end, lap_duration, lap_number, sectors)
values ($1, $2, $3, $4, $5, $6, $7, $8)
on conflict (meeting_key, session_key, driver_number)
do update set
              driver_number = excluded.driver_number,
              date_start = excluded.date_start,
              date_end = excluded.date_end,
              lap_duration = excluded.lap_duration,
              lap_number = excluded.lap_number,
              sectors = excluded.sectors
`

type UpsertDriverStatsParams struct {
	MeetingKey   int32
	SessionKey   int32
	DriverNumber int32
	DateStart    pgtype.Timestamptz
	DateEnd      pgtype.Timestamptz
	LapDuration  float64
	LapNumber    int32
	Sectors      int32
}

func (q *Queries) UpsertDriverStats(ctx context.Context, arg UpsertDriverStatsParams) error {
	_, err := q.db.Exec(ctx, upsertDriverStats,
		arg.MeetingKey,
		arg.SessionKey,
		arg.DriverNumber,
		arg.DateStart,
		arg.DateEnd,
		arg.LapDuration,
		arg.LapNumber,
		arg.Sectors,
	)
	return err
}
