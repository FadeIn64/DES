// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: laps.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAverageLapTime = `-- name: GetAverageLapTime :one
SELECT AVG(lap_duration)::float8
FROM complete_laps
WHERE driver_number = $1
  AND is_pit_out_lap = $2
  AND meeting_key = $3
  AND session_key = $4
  AND lap_duration > 0
`

type GetAverageLapTimeParams struct {
	DriverNumber int32
	IsPitOutLap  bool
	MeetingKey   int32
	SessionKey   int32
}

func (q *Queries) GetAverageLapTime(ctx context.Context, arg GetAverageLapTimeParams) (float64, error) {
	row := q.db.QueryRow(ctx, getAverageLapTime,
		arg.DriverNumber,
		arg.IsPitOutLap,
		arg.MeetingKey,
		arg.SessionKey,
	)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const getCurrentSegmentPace = `-- name: GetCurrentSegmentPace :one
WITH segment AS (
    SELECT lap_number, lap_duration
    FROM  complete_laps l
    WHERE l.driver_number = $1
      AND l.lap_number <= $2
      AND l.meeting_key = $3
      AND l.session_key = $4
      AND l.is_pit_out_lap = false
      AND l.lap_duration > 0
    ORDER BY l.lap_number DESC
    LIMIT (
        SELECT  COALESCE(
                       (SELECT $2 - l2.lap_number
                        FROM complete_laps l2
                        WHERE l2.driver_number = $1
                          AND l2.lap_number <= $2
                          AND l2.meeting_key = $3
                          AND l2.session_key = $4
                          AND l2.is_pit_out_lap = true
                        order by l2.lap_number desc),
                       $2
               )
        )
    )
    SELECT
        AVG(lap_duration)::float8 as average_pace,
        COUNT(*) as lap_count
    FROM segment
`

type GetCurrentSegmentPaceParams struct {
	DriverNumber int32
	LapNumber    int32
	MeetingKey   int32
	SessionKey   int32
}

type GetCurrentSegmentPaceRow struct {
	AveragePace float64
	LapCount    int64
}

func (q *Queries) GetCurrentSegmentPace(ctx context.Context, arg GetCurrentSegmentPaceParams) (GetCurrentSegmentPaceRow, error) {
	row := q.db.QueryRow(ctx, getCurrentSegmentPace,
		arg.DriverNumber,
		arg.LapNumber,
		arg.MeetingKey,
		arg.SessionKey,
	)
	var i GetCurrentSegmentPaceRow
	err := row.Scan(&i.AveragePace, &i.LapCount)
	return i, err
}

const getLap = `-- name: GetLap :one
SELECT meeting_key, session_key, driver_number, completed_sectors, date_start, lap_duration, lap_number, sector_duration, date_end, info_time, is_pit_out_lap, updated_at FROM laps
WHERE driver_number = $1 AND lap_number = $2 AND meeting_key = $3 AND session_key = $4
`

type GetLapParams struct {
	DriverNumber int32
	LapNumber    int32
	MeetingKey   int32
	SessionKey   int32
}

func (q *Queries) GetLap(ctx context.Context, arg GetLapParams) (Lap, error) {
	row := q.db.QueryRow(ctx, getLap,
		arg.DriverNumber,
		arg.LapNumber,
		arg.MeetingKey,
		arg.SessionKey,
	)
	var i Lap
	err := row.Scan(
		&i.MeetingKey,
		&i.SessionKey,
		&i.DriverNumber,
		&i.CompletedSectors,
		&i.DateStart,
		&i.LapDuration,
		&i.LapNumber,
		&i.SectorDuration,
		&i.DateEnd,
		&i.InfoTime,
		&i.IsPitOutLap,
		&i.UpdatedAt,
	)
	return i, err
}

const moveCompleteLap = `-- name: MoveCompleteLap :exec
INSERT INTO complete_laps (meeting_key, session_key, driver_number,
                           date_start, lap_duration, lap_number,
                           sector_duration, info_time, is_pit_out_lap)
SELECT l.meeting_key, l.session_key, l.driver_number,
       l.date_start, l.lap_duration, l.lap_number, l.sector_duration, l.info_time, l.is_pit_out_lap FROM laps l
WHERE l.meeting_key = $1 AND l.session_key = $2 AND l.driver_number = $3 AND l.lap_number = $4 AND l.completed_sectors = $5
ON CONFLICT (meeting_key, session_key, driver_number, lap_number) DO NOTHING
`

type MoveCompleteLapParams struct {
	MeetingKey       int32
	SessionKey       int32
	DriverNumber     int32
	LapNumber        int32
	CompletedSectors int32
}

func (q *Queries) MoveCompleteLap(ctx context.Context, arg MoveCompleteLapParams) error {
	_, err := q.db.Exec(ctx, moveCompleteLap,
		arg.MeetingKey,
		arg.SessionKey,
		arg.DriverNumber,
		arg.LapNumber,
		arg.CompletedSectors,
	)
	return err
}

const upsertLap = `-- name: UpsertLap :exec
INSERT INTO laps (
    meeting_key, session_key, driver_number, completed_sectors,
    date_start, lap_duration, lap_number, date_end,
    sector_duration, info_time, is_pit_out_lap
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
         )
ON CONFLICT ( meeting_key, session_key, driver_number, lap_number, completed_sectors)
    DO UPDATE SET
                  date_start = EXCLUDED.date_start,
                  lap_duration = COALESCE(NULLIF(EXCLUDED.lap_duration, 0), laps.lap_duration),
                  sector_duration = EXCLUDED.sector_duration,
                  date_end = EXCLUDED.date_end,
                  info_time = GREATEST(EXCLUDED.info_time, laps.info_time),
                  is_pit_out_lap = EXCLUDED.is_pit_out_lap,
                  updated_at = NOW()
`

type UpsertLapParams struct {
	MeetingKey       int32
	SessionKey       int32
	DriverNumber     int32
	CompletedSectors int32
	DateStart        pgtype.Timestamptz
	LapDuration      float64
	LapNumber        int32
	DateEnd          pgtype.Timestamptz
	SectorDuration   []float64
	InfoTime         pgtype.Timestamptz
	IsPitOutLap      bool
}

func (q *Queries) UpsertLap(ctx context.Context, arg UpsertLapParams) error {
	_, err := q.db.Exec(ctx, upsertLap,
		arg.MeetingKey,
		arg.SessionKey,
		arg.DriverNumber,
		arg.CompletedSectors,
		arg.DateStart,
		arg.LapDuration,
		arg.LapNumber,
		arg.DateEnd,
		arg.SectorDuration,
		arg.InfoTime,
		arg.IsPitOutLap,
	)
	return err
}
