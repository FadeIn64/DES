// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: laps.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLap = `-- name: GetLap :one
SELECT meeting_key, session_key, driver_number, date_start, lap_duration, lap_number, sector_duration, info_time, is_pit_out_lap, updated_at FROM laps
WHERE driver_number = $1 AND lap_number = $2
`

type GetLapParams struct {
	DriverNumber int32
	LapNumber    int32
}

func (q *Queries) GetLap(ctx context.Context, arg GetLapParams) (Lap, error) {
	row := q.db.QueryRow(ctx, getLap, arg.DriverNumber, arg.LapNumber)
	var i Lap
	err := row.Scan(
		&i.MeetingKey,
		&i.SessionKey,
		&i.DriverNumber,
		&i.DateStart,
		&i.LapDuration,
		&i.LapNumber,
		&i.SectorDuration,
		&i.InfoTime,
		&i.IsPitOutLap,
		&i.UpdatedAt,
	)
	return i, err
}

const moveCompleteLap = `-- name: MoveCompleteLap :exec
INSERT INTO complete_laps
SELECT meeting_key, session_key, driver_number, date_start, lap_duration, lap_number, sector_duration, info_time, is_pit_out_lap, updated_at FROM laps l
WHERE l.driver_number = $1 AND l.lap_number = $2 AND l.lap_duration > 0
ON CONFLICT (driver_number, lap_number) DO NOTHING
`

type MoveCompleteLapParams struct {
	DriverNumber int32
	LapNumber    int32
}

func (q *Queries) MoveCompleteLap(ctx context.Context, arg MoveCompleteLapParams) error {
	_, err := q.db.Exec(ctx, moveCompleteLap, arg.DriverNumber, arg.LapNumber)
	return err
}

const upsertLap = `-- name: UpsertLap :exec
INSERT INTO laps (
    meeting_key, session_key, driver_number,
    date_start, lap_duration, lap_number,
    sector_duration, info_time, is_pit_out_lap
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
ON CONFLICT (driver_number, lap_number)
    DO UPDATE SET
                  meeting_key = EXCLUDED.meeting_key,
                  session_key = EXCLUDED.session_key,
                  date_start = EXCLUDED.date_start,
                  lap_duration = COALESCE(NULLIF(EXCLUDED.lap_duration, 0), laps.lap_duration),
                  sector_duration = EXCLUDED.sector_duration,
                  info_time = GREATEST(EXCLUDED.info_time, laps.info_time),
                  is_pit_out_lap = EXCLUDED.is_pit_out_lap,
                  updated_at = NOW()
`

type UpsertLapParams struct {
	MeetingKey     int32
	SessionKey     int32
	DriverNumber   int32
	DateStart      pgtype.Timestamptz
	LapDuration    float64
	LapNumber      int32
	SectorDuration []float64
	InfoTime       pgtype.Timestamptz
	IsPitOutLap    bool
}

func (q *Queries) UpsertLap(ctx context.Context, arg UpsertLapParams) error {
	_, err := q.db.Exec(ctx, upsertLap,
		arg.MeetingKey,
		arg.SessionKey,
		arg.DriverNumber,
		arg.DateStart,
		arg.LapDuration,
		arg.LapNumber,
		arg.SectorDuration,
		arg.InfoTime,
		arg.IsPitOutLap,
	)
	return err
}
