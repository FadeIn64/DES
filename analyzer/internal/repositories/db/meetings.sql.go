// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: meetings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMeeting = `-- name: CreateMeeting :exec
INSERT INTO meetings (meeting_key, name, description, circuit, location, start_date, end_date, year, dashboard_link) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
ON CONFLICT (meeting_key)
do update
set
    name = excluded.name,
    description = excluded.description,
    circuit = excluded.circuit,
    location = excluded.location,
    start_date = excluded.start_date,
    end_date = excluded.end_date,
    year = excluded.year,
    dashboard_link = excluded.dashboard_link
`

type CreateMeetingParams struct {
	MeetingKey    int64
	Name          string
	Description   string
	Circuit       string
	Location      string
	StartDate     pgtype.Timestamptz
	EndDate       pgtype.Timestamptz
	Year          int32
	DashboardLink pgtype.Text
}

func (q *Queries) CreateMeeting(ctx context.Context, arg CreateMeetingParams) error {
	_, err := q.db.Exec(ctx, createMeeting,
		arg.MeetingKey,
		arg.Name,
		arg.Description,
		arg.Circuit,
		arg.Location,
		arg.StartDate,
		arg.EndDate,
		arg.Year,
		arg.DashboardLink,
	)
	return err
}

const getCurrentMeeting = `-- name: GetCurrentMeeting :one
SELECT meeting_key, name, description, circuit, location, start_date, end_date, year, dashboard_link FROM meetings
WHERE start_date <= NOW() AND end_date >= NOW()
LIMIT 1
`

func (q *Queries) GetCurrentMeeting(ctx context.Context) (Meeting, error) {
	row := q.db.QueryRow(ctx, getCurrentMeeting)
	var i Meeting
	err := row.Scan(
		&i.MeetingKey,
		&i.Name,
		&i.Description,
		&i.Circuit,
		&i.Location,
		&i.StartDate,
		&i.EndDate,
		&i.Year,
		&i.DashboardLink,
	)
	return i, err
}

const getMeetingByKet = `-- name: GetMeetingByKet :one
SELECT meeting_key, name, description, circuit, location, start_date, end_date, year, dashboard_link from meetings
    WHERE meeting_key = $1
`

func (q *Queries) GetMeetingByKet(ctx context.Context, meetingKey int64) (Meeting, error) {
	row := q.db.QueryRow(ctx, getMeetingByKet, meetingKey)
	var i Meeting
	err := row.Scan(
		&i.MeetingKey,
		&i.Name,
		&i.Description,
		&i.Circuit,
		&i.Location,
		&i.StartDate,
		&i.EndDate,
		&i.Year,
		&i.DashboardLink,
	)
	return i, err
}

const getMeetings = `-- name: GetMeetings :many
SELECT meeting_key, name, description, circuit, location, start_date, end_date, year, dashboard_link FROM meetings
    ORDER BY start_date
`

func (q *Queries) GetMeetings(ctx context.Context) ([]Meeting, error) {
	rows, err := q.db.Query(ctx, getMeetings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meeting
	for rows.Next() {
		var i Meeting
		if err := rows.Scan(
			&i.MeetingKey,
			&i.Name,
			&i.Description,
			&i.Circuit,
			&i.Location,
			&i.StartDate,
			&i.EndDate,
			&i.Year,
			&i.DashboardLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
