// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: laps_query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLapsStartDateBetween = `-- name: GetLapsStartDateBetween :many
select id, meeting_key, session_key, driver_number, date_start, lap_duration, lap_number, sector_duration, info_time, is_pit_out_lap
from laps
where info_time >= $1
  and info_time <= $2
`

type GetLapsStartDateBetweenParams struct {
	InfoTime   pgtype.Timestamptz
	InfoTime_2 pgtype.Timestamptz
}

func (q *Queries) GetLapsStartDateBetween(ctx context.Context, arg GetLapsStartDateBetweenParams) ([]Lap, error) {
	rows, err := q.db.Query(ctx, getLapsStartDateBetween, arg.InfoTime, arg.InfoTime_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lap
	for rows.Next() {
		var i Lap
		if err := rows.Scan(
			&i.ID,
			&i.MeetingKey,
			&i.SessionKey,
			&i.DriverNumber,
			&i.DateStart,
			&i.LapDuration,
			&i.LapNumber,
			&i.SectorDuration,
			&i.InfoTime,
			&i.IsPitOutLap,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLap = `-- name: InsertLap :exec
insert into laps(meeting_key, session_key, driver_number, date_start, lap_duration, lap_number, sector_duration, info_time, is_pit_out_lap)
values ($1, $2, $3,$4, $5, $6,$7, $8, $9)
`

type InsertLapParams struct {
	MeetingKey     int32
	SessionKey     int32
	DriverNumber   int32
	DateStart      pgtype.Timestamptz
	LapDuration    float64
	LapNumber      int32
	SectorDuration []float64
	InfoTime       pgtype.Timestamptz
	IsPitOutLap    bool
}

func (q *Queries) InsertLap(ctx context.Context, arg InsertLapParams) error {
	_, err := q.db.Exec(ctx, insertLap,
		arg.MeetingKey,
		arg.SessionKey,
		arg.DriverNumber,
		arg.DateStart,
		arg.LapDuration,
		arg.LapNumber,
		arg.SectorDuration,
		arg.InfoTime,
		arg.IsPitOutLap,
	)
	return err
}
