// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: laps_query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLapsStartDateBetween = `-- name: GetLapsStartDateBetween :many
select id, meeting_key, session_key, driver_number, i1_speed, i2_speed, st_speed, date_start, lap_duration, is_pit_out_lap, duration_sector_1, duration_sector_2, duration_sector_3, segments_sector_1, segments_sector_2, segments_sector_3, lap_number from laps
where date_start >= $1 and date_start <= $2
`

type GetLapsStartDateBetweenParams struct {
	DateStart   pgtype.Timestamp
	DateStart_2 pgtype.Timestamp
}

func (q *Queries) GetLapsStartDateBetween(ctx context.Context, arg GetLapsStartDateBetweenParams) ([]Lap, error) {
	rows, err := q.db.Query(ctx, getLapsStartDateBetween, arg.DateStart, arg.DateStart_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lap
	for rows.Next() {
		var i Lap
		if err := rows.Scan(
			&i.ID,
			&i.MeetingKey,
			&i.SessionKey,
			&i.DriverNumber,
			&i.I1Speed,
			&i.I2Speed,
			&i.StSpeed,
			&i.DateStart,
			&i.LapDuration,
			&i.IsPitOutLap,
			&i.DurationSector1,
			&i.DurationSector2,
			&i.DurationSector3,
			&i.SegmentsSector1,
			&i.SegmentsSector2,
			&i.SegmentsSector3,
			&i.LapNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLap = `-- name: InsertLap :exec
insert into laps (meeting_key, session_key, driver_number, i1_speed, i2_speed, st_speed, date_start, lap_duration, is_pit_out_lap, duration_sector_1, duration_sector_2, duration_sector_3, segments_sector_1, segments_sector_2, segments_sector_3, lap_number)
values
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
`

type InsertLapParams struct {
	MeetingKey      int32
	SessionKey      int32
	DriverNumber    pgtype.Int4
	I1Speed         pgtype.Int4
	I2Speed         pgtype.Int4
	StSpeed         pgtype.Int4
	DateStart       pgtype.Timestamp
	LapDuration     pgtype.Float8
	IsPitOutLap     pgtype.Bool
	DurationSector1 pgtype.Float8
	DurationSector2 pgtype.Float8
	DurationSector3 pgtype.Float8
	SegmentsSector1 []int32
	SegmentsSector2 []int32
	SegmentsSector3 []int32
	LapNumber       int32
}

func (q *Queries) InsertLap(ctx context.Context, arg InsertLapParams) error {
	_, err := q.db.Exec(ctx, insertLap,
		arg.MeetingKey,
		arg.SessionKey,
		arg.DriverNumber,
		arg.I1Speed,
		arg.I2Speed,
		arg.StSpeed,
		arg.DateStart,
		arg.LapDuration,
		arg.IsPitOutLap,
		arg.DurationSector1,
		arg.DurationSector2,
		arg.DurationSector3,
		arg.SegmentsSector1,
		arg.SegmentsSector2,
		arg.SegmentsSector3,
		arg.LapNumber,
	)
	return err
}
